{"version":3,"sources":["js/promisify.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAAA,aACA,QAAA,0BAIA,MAAMA,EAASC,GACJ,IAAIC,QAASC,IAChBC,WAAW,KACPD,EAAQF,IACTA,KAILI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAMjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAK5B,SAASC,EAAgBC,EAAUC,GACxB,OAAA,IAAIb,QAASC,IAOhBA,EALqBW,EAASE,IAAKC,GAC/BA,EAAKN,OAASI,EACR,IAAKE,EAAML,QAASK,EAAKL,QACzBK,MAMlBJ,EAAgBH,EAAO,SAASD,KAAKF,QAAQW,OAC7CL,EAAgBH,EAAO,QAAQD,KAAKF,QAAQW,OAO5C,MAAMC,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,EAAmBC,IACf1B,MAAAA,EAAQmB,EAA0B,IAAK,KAEtC,OAAA,IAAIjB,QAAQ,CAACC,EAASwB,KACzBvB,WAAW,KACYkB,KAAKE,SAAW,GAG/BrB,EAAQ,CAAEyB,GAAIF,EAAYE,GAAItB,KAAMN,IAEpC2B,EAAOD,EAAYE,KAExB5B,MAIL6B,EAAa,EAAGD,GAAAA,EAAItB,KAAAA,MACtBC,QAAQC,mBAAmBoB,kBAAmBtB,QAG5CwB,EAAWF,IACbrB,QAAQwB,qCAAqCH,+BAIjDH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH","file":"promisify.b2ee958b.js","sourceRoot":"../src","sourcesContent":["'use strict';\nimport '../sass/promisify.scss';\n\n// Task 3.1\n\nconst delay = (ms) => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    })\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n\n\n// Task 3.2\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: false },\n];\n\n\n\nfunction toggleUserState(allUsers, userName) {\n    return new Promise((resolve) => {\n\n        const updatedUsers = allUsers.map((user) =>\n            user.name === userName\n                ? { ...user, active: !user.active }\n                : user);\n\n        resolve(updatedUsers);\n    })\n};\n\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n\n\n\n// Task 3.3\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve({ id: transaction.id, time: delay });\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    })\n};\n\nconst logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// // The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);"]}